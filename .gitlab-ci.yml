################################
##  CONFIGURATION             ##
################################

variables:
  DOCKER_TLS_CERTDIR: ""


.install_awscli: &install_awscli |
  apk add --no-cache curl jq python3 py-pip
  pip install awscli --upgrade

################################
##  CI/CD PIPELINE            ##
################################

stages:
- test
- build
# - deploy


build-and-test-app:
  stage: test
  image: golang:alpine
  before_script:
    - apk add bash ca-certificates git gcc g++ libc-dev
    - go --version
  script:
  - make build
  rules:
  - when: always

build-image:
  stage: build
  image: docker
  services:
    - docker:dind
  before_script:
    - *install_awscli
    - aws --version
    - docker --version
  script:
  - echo ${CI_COMMIT_REF_NAME} > VERSION
  - export VERSION_TAG_K8s=$(echo ${CI_COMMIT_REF_NAME}_$(date +%Y%m%d_%H%M%S) | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]._-')
  - export VERSION_IMAGE_K8S=${ECR_REPOSITORY}:${VERSION_TAG_K8s}
  - echo ${VERSION_IMAGE_K8S}
  - aws ecr get-login-password | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
  - docker pull ${ECR_REPOSITORY}:latest || true
  - docker build -t ${VERSION_IMAGE_K8S} -t ${ECR_REPOSITORY}:latest .
  - docker push ${VERSION_IMAGE_K8S}
  - docker push ${ECR_REPOSITORY}:latest
  - echo "DEPLOY_VERSION=${VERSION_TAG_K8s}" >> image.env
  - echo "VERSION_IMAGE_K8S=${VERSION_IMAGE_K8S}" >> image.env
  - cat image.env
  artifacts:
    reports:
      dotenv: image.env
  rules:
  - when: always

